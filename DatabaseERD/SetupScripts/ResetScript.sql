BEGIN;
DROP TABLE users_cards;
DROP TABLE packages_cards;
DROP TABLE decks_cards;
DROP TABLE decks;
DROP TABLE trade_offers;
DROP TABLE users_stats;
DROP TABLE users;
DROP TABLE cards;
DROP TABLE card_category;
DROP TABLE packages;
END;



-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.users
(
    user_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    username text NOT NULL,
    password text NOT NULL,
    coins integer NOT NULL,
    PRIMARY KEY (user_id)
);

COMMENT ON TABLE public.users
    IS 'Table for Users';

CREATE TABLE IF NOT EXISTS public.cards
(
    card_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    category_id text NOT NULL,
    name text NOT NULL,
    damage real NOT NULL,
    card_type "char" NOT NULL,
    element_type "char" NOT NULL,
    PRIMARY KEY (card_id)
);

COMMENT ON TABLE public.cards
    IS 'All avaiable Cards in the Game';

CREATE TABLE IF NOT EXISTS public.users_cards
(
    card_id integer NOT NULL,
    user_id integer NOT NULL,
    count integer NOT NULL,
    PRIMARY KEY (card_id, user_id)
);

COMMENT ON TABLE public.users_cards
    IS 'Connection between User and Cards. Maps all cards a user has';

CREATE TABLE IF NOT EXISTS public.packages
(
    package_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    price integer NOT NULL,
    active boolean NOT NULL,
    PRIMARY KEY (package_id)
);

COMMENT ON TABLE public.packages
    IS 'Stores all created packages';

CREATE TABLE IF NOT EXISTS public.packages_cards
(
    package_id integer NOT NULL,
    card_id integer NOT NULL,
    PRIMARY KEY (package_id, card_id)
);

COMMENT ON TABLE public.packages_cards
    IS 'Mapps cards to package';

CREATE TABLE IF NOT EXISTS public.decks
(
    deck_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    user_id integer NOT NULL,
    PRIMARY KEY (deck_id)
);

COMMENT ON TABLE public.decks
    IS 'Deck of a user';

CREATE TABLE IF NOT EXISTS public.decks_cards
(
    deck_id integer NOT NULL,
    card_id integer NOT NULL,
    PRIMARY KEY (deck_id, card_id)
);

COMMENT ON TABLE public.decks_cards
    IS 'Map cards to a deck';

CREATE TABLE IF NOT EXISTS public.card_category
(
    category_id text NOT NULL,
    PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS public.users_stats
(
    stats_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    user_id integer NOT NULL,
    username text NOT NULL,
    coins_spent integer NOT NULL,
    battles_played integer NOT NULL,
    wins integer NOT NULL,
    win_rate real NOT NULL,
    CONSTRAINT "Pk_users_stats" PRIMARY KEY (stats_id)
);

CREATE TABLE IF NOT EXISTS public.trade_offers
(
    trade_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    offered_card_id integer NOT NULL,
    seller_id integer NOT NULL,
    buyer_id integer,
    type_requirement "char",
    damage_requirement real,
    category_requirement text,
    element_requirement "char",
    active boolean NOT NULL,
    PRIMARY KEY (trade_id)
);

ALTER TABLE IF EXISTS public.cards
    ADD FOREIGN KEY (category_id)
    REFERENCES public.card_category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users_cards
    ADD FOREIGN KEY (card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users_cards
    ADD FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.packages_cards
    ADD FOREIGN KEY (package_id)
    REFERENCES public.packages (package_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.packages_cards
    ADD FOREIGN KEY (card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.decks
    ADD FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.decks_cards
    ADD FOREIGN KEY (deck_id)
    REFERENCES public.decks (deck_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.decks_cards
    ADD FOREIGN KEY (card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users_stats
    ADD FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trade_offers
    ADD FOREIGN KEY (offered_card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trade_offers
    ADD FOREIGN KEY (seller_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trade_offers
    ADD FOREIGN KEY (buyer_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;


BEGIN;
INSERT INTO card_category (category_id) VALUES ('Goblin');
INSERT INTO card_category (category_id) VALUES ('Dragon');
INSERT INTO card_category (category_id) VALUES ('Wizzard');
INSERT INTO card_category (category_id) VALUES ('Ork');
INSERT INTO card_category (category_id) VALUES ('Knight');
INSERT INTO card_category (category_id) VALUES ('Kraken');
INSERT INTO card_category (category_id) VALUES ('FireElve');
INSERT INTO card_category (category_id) VALUES ('Troll');

INSERT INTO card_category (category_id) VALUES ('WaterSpell');
INSERT INTO card_category (category_id) VALUES ('FireSpell');
INSERT INTO card_category (category_id) VALUES ('RegularSpell');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('SmallGoblin', 'Goblin', 20, 'M', 'N');
INSERT INTO cards (name,category_id, damage, card_type, element_type) VALUES ('FireGoblin', 'Goblin', 25, 'M', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('WaterGoblin', 'Goblin', 25, 'M', 'W');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('SmallDragon', 'Dragon', 50, 'M', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('MediumDragon', 'Dragon', 75, 'M', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('BigDragon', 'Dragon', 100, 'M', 'F');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('StupidWizzard', 'Wizzard', 10, 'M', 'N');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('FireWizzard', 'Wizzard', 40, 'M', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('SmartWizzard', 'Wizzard', 80, 'M', 'N');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('RoyalKnight', 'Knight', 110, 'M', 'N');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('Knight', 'Knight', 60, 'M', 'N');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('SmallKraken', 'Kraken', 50, 'M', 'N');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('BigKraken', 'Kraken', 70, 'M', 'N');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('FireElve', 'FireElve', 40, 'M', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('FastFireElve', 'FireElve', 70, 'M', 'F');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('FireElve', 'FireElve', 40, 'M', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('FastFireElve', 'FireElve', 70, 'M', 'F');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('FatOrk', 'Ork', 50, 'M', 'N');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('Ork', 'Ork', 35, 'M', 'N');

INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('Troll', 'Troll', 35, 'S', 'N');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('WaterTroll', 'Troll', 50, 'S', 'W');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('FireTroll', 'Troll', 50, 'S', 'F');

--Spell Cards
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('SmallWaterSpell', 'WaterSpell', 25, 'S', 'W');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('BigWaterSpell', 'WaterSpell', 55, 'S', 'W');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('SmallRegularSpell', 'RegularSpell', 30, 'S', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('BigRegularSpell', 'RegularSpell', 50, 'S', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('SmallFireSpell', 'FireSpell', 30, 'S', 'F');
INSERT INTO cards (name, category_id, damage, card_type, element_type) VALUES ('BigFireSpell', 'FireSpell', 50, 'S', 'F');

INSERT INTO users (username, password, coins) VALUES ('admin', 'admin', 10000);
INSERT INTO users_stats (user_Id, username, coins_spent, battles_played, wins, win_rate) VALUES (1, 'admin', 0, 0, 0, 0);
INSERT INTO decks (user_Id) VALUES (1);
INSERT INTO users_cards(card_id, user_id, count) VALUES (1, 1, 1);
INSERT INTO decks_cards (deck_id, card_id) VALUES (1, 1);
INSERT INTO decks_cards (deck_id, card_id) VALUES (1, 3);
INSERT INTO decks_cards (deck_id, card_id) VALUES (1, 5);
INSERT INTO decks_cards (deck_id, card_id) VALUES (1, 10);

INSERT INTO users (username, password, coins) VALUES ('John', 'Wick', 500);
INSERT INTO users_stats (user_Id, username, coins_spent, battles_played, wins, win_rate) VALUES (2, 'Test', 0, 0, 0, 0);
INSERT INTO decks (user_Id) VALUES (2);
INSERT INTO users_cards(card_id, user_id, count) VALUES (1, 2, 1);
INSERT INTO users_cards(card_id, user_id, count) VALUES (5, 2, 1);
INSERT INTO users_cards(card_id, user_id, count) VALUES (10, 2, 1);
INSERT INTO users_cards(card_id, user_id, count) VALUES (13, 2, 1);
END;