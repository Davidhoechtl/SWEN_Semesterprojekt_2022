-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.users
(
    user_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    username text NOT NULL,
    password text NOT NULL,
    coins integer NOT NULL,
    elo integer NOT NULL,
    PRIMARY KEY (user_id)
);

COMMENT ON TABLE public.users
    IS 'Table for Users';

CREATE TABLE IF NOT EXISTS public.cards
(
    card_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    category_id text NOT NULL,
    name text NOT NULL,
    damage real NOT NULL,
    card_type "char" NOT NULL,
    element_type "char" NOT NULL,
    PRIMARY KEY (card_id)
);

COMMENT ON TABLE public.cards
    IS 'All avaiable Cards in the Game';

CREATE TABLE IF NOT EXISTS public.users_cards
(
    card_id integer NOT NULL,
    user_id integer NOT NULL,
    count integer NOT NULL,
    PRIMARY KEY (card_id, user_id)
);

COMMENT ON TABLE public.users_cards
    IS 'Connection between User and Cards. Maps all cards a user has';

CREATE TABLE IF NOT EXISTS public.packages
(
    package_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    price integer NOT NULL,
    active boolean NOT NULL,
    PRIMARY KEY (package_id)
);

COMMENT ON TABLE public.packages
    IS 'Stores all created packages';

CREATE TABLE IF NOT EXISTS public.packages_cards
(
    package_id integer NOT NULL,
    card_id integer NOT NULL,
    PRIMARY KEY (package_id, card_id)
);

COMMENT ON TABLE public.packages_cards
    IS 'Mapps cards to package';

CREATE TABLE IF NOT EXISTS public.decks
(
    deck_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    user_id integer NOT NULL,
    PRIMARY KEY (deck_id)
);

COMMENT ON TABLE public.decks
    IS 'Deck of a user';

CREATE TABLE IF NOT EXISTS public.decks_cards
(
    deck_id integer NOT NULL,
    card_id integer NOT NULL,
    PRIMARY KEY (deck_id, card_id)
);

COMMENT ON TABLE public.decks_cards
    IS 'Map cards to a deck';

CREATE TABLE IF NOT EXISTS public.card_category
(
    category_id text NOT NULL,
    PRIMARY KEY (category_id)
);

CREATE TABLE IF NOT EXISTS public.users_stats
(
    stats_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    user_id integer NOT NULL,
    username text NOT NULL,
    coins_spent integer NOT NULL,
    battles_played integer NOT NULL,
    wins integer NOT NULL,
    win_rate real NOT NULL,
    CONSTRAINT "Pk_users_stats" PRIMARY KEY (stats_id)
);

CREATE TABLE IF NOT EXISTS public.trade_offers
(
    trade_id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    offered_card_id integer NOT NULL,
    seller_id integer NOT NULL,
    buyer_id integer,
    type_requirement "char",
    damage_requirement real,
    category_requirement text,
    element_requirement "char",
    active boolean NOT NULL,
    PRIMARY KEY (trade_id)
);

ALTER TABLE IF EXISTS public.cards
    ADD FOREIGN KEY (category_id)
    REFERENCES public.card_category (category_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users_cards
    ADD FOREIGN KEY (card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users_cards
    ADD FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.packages_cards
    ADD FOREIGN KEY (package_id)
    REFERENCES public.packages (package_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.packages_cards
    ADD FOREIGN KEY (card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.decks
    ADD FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.decks_cards
    ADD FOREIGN KEY (deck_id)
    REFERENCES public.decks (deck_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.decks_cards
    ADD FOREIGN KEY (card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users_stats
    ADD FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trade_offers
    ADD FOREIGN KEY (offered_card_id)
    REFERENCES public.cards (card_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trade_offers
    ADD FOREIGN KEY (seller_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.trade_offers
    ADD FOREIGN KEY (buyer_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;